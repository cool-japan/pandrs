[package]
name = "pandrs"
version = "0.1.0-alpha.2"
edition = "2021"
description = "A Rust implementation of pandas-like DataFrame for data analysis"
authors = ["Cool Japan"]
license = "Apache-2.0"
repository = "https://github.com/cool-japan/pandrs"
readme = "README.md"
keywords = ["dataframe", "data", "analytics", "pandas", "statistics"]
categories = ["data-structures", "science", "mathematics"]

[dependencies]
num-traits = "0.2.19"
chrono = "0.4.40"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.114"
thiserror = "2.0.12"
csv = "1.3.1"
rand = "0.9.0"  # Random number generation
chrono-tz = "0.10.3"  # Timezone processing
# Due to compatibility issues with plotters, using textplots-rs (text-based plots)
textplots = "0.8.7"  # For visualization features (text-based)
rayon = "1.9.0"  # For parallel processing
regex = "1.10.2"  # For regular expression processing
lazy_static = "1.5.0"  # For global variables/singletons
# Enable Parquet support with latest version
parquet = "54.3.1"  # For Parquet file support
arrow = "54.3.1"  # For Arrow format support
plotters = "0.3.7"
# For streaming data support
crossbeam-channel = "0.5.8"  # For concurrent message passing
memmap2 = "0.7.1"  # For memory-mapped files
# Excel support
calamine = "0.23.1"  # For Excel reading
simple_excel_writer = "0.2.0"  # For Excel writing
# SQL support
sqlx = { version = "0.7.3", features = ["runtime-tokio", "mysql", "postgres", "sqlite"], optional = true }
rusqlite = "0.30.0"  # SQLite support

# WebAssembly support (optional)
wasm-bindgen = { version = "0.2.91", optional = true }  # WebAssembly bindings
js-sys = { version = "0.3.68", optional = true }  # JavaScript interop
web-sys = { version = "0.3.68", features = [
    "Document", "Element", "HtmlCanvasElement", "Window",
    "CanvasRenderingContext2d", "MouseEvent", "console"
], optional = true }  # Web API bindings
plotters-canvas = { version = "0.3.0", optional = true }  # Canvas backend for plotters

# CUDA support (optional)
cudarc = { version = "0.10.0", optional = true }  # CUDA bindings
half = { version = "2.3.1", optional = true }  # Half-precision floating point support
ndarray = { version = "0.15.6", optional = true } # N-dimensional arrays

# Distributed processing support (optional)
datafusion = { version = "31.0.0", optional = true }  # DataFrame processing engine
uuid = { version = "1.4.1", optional = true }  # For unique IDs in distributed processing
log = "0.4.20"  # Logging interface

[features]
default = []
optimized = []  # Flag for optimized implementation
wasm = ["wasm-bindgen", "js-sys", "web-sys", "plotters-canvas"]  # WebAssembly support
cuda = ["cudarc", "half", "ndarray"]  # CUDA support
distributed = ["datafusion", "uuid"]  # Distributed processing support

[dev-dependencies]
tempfile = "3.8.1"  # Create temporary files for testing